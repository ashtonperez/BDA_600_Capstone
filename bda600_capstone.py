# -*- coding: utf-8 -*-
"""BDA600_Capstone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZjJeXHDh3Y6k-m4owHZRACAPVfaK8162

#Imports
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files
from scipy.stats import ttest_ind
import numpy as np

"""#Data upload"""

# Update the file path based on the location where you uploaded the file
file_path = '/content/san_diego_tracts_cleaned.xlsx'

# Load the data file
df = pd.read_excel(file_path)

# Display the first few rows of the dataframe
# print(df.head())

# Determine the data types of each column
# df.dtypes

# View a summary of the data such as mean, median, standard deviation,
# df.describe()

# Identify and handle missing values
missing_values = df.isnull().sum().to_dict()
print(missing_values)

# Find out how many tracts there are
unique_count = df['CensusTract'].nunique()

print()

# Print the count of unique items (there are 619 unique tracts)
print(f'There are {unique_count} unique items in the census field.')

# Filter the DataFrame to keep only rows that are neither food desert nor low-income tracts
neither_food_desert_nor_low_income_df = df[(df['LILATracts_halfAnd10'] == 0) & (df['LowIncomeTracts'] == 0)]

# Specify the file path for saving the filtered DataFrame
file_path = 'neither_food_desert_nor_low_income_df.csv'

# Save the filtered DataFrame as a CSV file
neither_food_desert_nor_low_income_df.to_csv(file_path, index=False)

print(f'The neither food desert nor low income data set has been saved as {file_path}')

"""#Describe the three tracts


*   Food Deserts
*   Low Income
*   total tracts not food desert not low income  


"""

# Calculate the overall count of food desert tracts (128 tracts)
food_desert_count = df[df['LILATracts_halfAnd10'] == 1].shape[0]

# Calculate the overall count of low-income tracts (211 tracts = 128 overlapping from food deserts and another 83 tracts)
low_income_tract_count = df[df['LowIncomeTracts'] == 1].shape[0]

# Calculate the overall count of tracts not low income or food desert (408)
not_food_desert_not_low_income = df[(df['LILATracts_halfAnd10'] == 0) & (df['LowIncomeTracts'] == 0)]
total_not_food_desert_not_low_income = not_food_desert_not_low_income.shape[0]

# Calculate the total count of tracts (619). Thus: 128 food deserts + 83 additional low incomes + 408 non LI tracts = 619 total tracts
total_tract_count = df.shape[0]

# Calculate the percentage of food desert tracts as a percentage of low-income tracts (60.66%)
food_desert_percentage_of_low_income = (food_desert_count / low_income_tract_count) * 100

# Calculate the percentage of low income tracts as a percentage of total tracts (34.087%)
low_income_percentage_of_total_tracts = (low_income_tract_count / total_tract_count) * 100

# Calculate the percentage of food desert tracts as a percentage of total tracts (20.48%)
food_desert_percentage_of_total_tracts = (food_desert_count / total_tract_count) * 100

# Create a DataFrame for visualization
data = {
    'Category': ['Food Desert (FD)', 'Low Income (LI)','Total ', 'FD % of LI', 'FD % of Total', 'LI % of Total'],
    'Count': [food_desert_count, low_income_tract_count, total_tract_count, food_desert_percentage_of_low_income, food_desert_percentage_of_total_tracts, low_income_percentage_of_total_tracts]
}
df_plot = pd.DataFrame(data)

# Plotting the graph
plt.figure(figsize=(10, 6))
bars = plt.bar(df_plot['Category'], df_plot['Count'], color=['blue', 'green', 'red', 'pink', 'blue', 'orange'])

# Add labels and title
plt.xlabel('Category')
plt.ylabel('Count / Percentage')
plt.title('Counts and Percentages of Food Desert Tracts (FD) and Low Income Tracts (LI)')

# Add value labels at the top of each bar
for bar in bars:
    # Get the height of each bar (value)
    height = bar.get_height()
    # Add text label at the top of the bar
    plt.text(
        bar.get_x() + bar.get_width() / 2,
        height,
        f'{height:.2f}',  # Display the value with 2 decimal places if it's a percentage
        ha='center',
        va='bottom',
        color='black'
    )

# Display the plot
plt.show()

# Show the plots
plt.tight_layout()
plt.show()

# Define the groups
food_desert_tracts = df[df['LILATracts_halfAnd10'] == 1]
low_income_not_food_desert = df[(df['LowIncomeTracts'] == 1) & (df['LILATracts_halfAnd10'] == 0)]
neither_food_desert_nor_low_income_tracts = df[(df['LILATracts_halfAnd10'] == 0) & (df['LowIncomeTracts'] == 0)]

# Calculate the total population count for each group
total_pop_food_desert = food_desert_tracts['Pop2010'].sum()
total_pop_low_income_not_food_desert = low_income_not_food_desert['Pop2010'].sum()
total_pop_neither_food_desert_nor_low_income = neither_food_desert_nor_low_income_tracts['Pop2010'].sum()

# Create a DataFrame to organize the sums for plotting
pop_df = pd.DataFrame({
    'Group': ['Food Desert Tracts', 'Low Income Not Food Desert Tracts', 'Neither Food Desert Nor Low Income Tracts'],
    'Population Count': [total_pop_food_desert, total_pop_low_income_not_food_desert, total_pop_neither_food_desert_nor_low_income]
})

# Plotting the graph
plt.figure(figsize=(10, 6))
bars = plt.bar(pop_df['Group'], pop_df['Population Count'], color=['blue', 'green', 'orange'])

# Add labels and title
plt.xlabel('Group')
plt.ylabel('Total Population Count')
plt.title('Total Population Count for Different Tracts')

# Add value labels at the top of each bar
for bar in bars:
    # Get the height of each bar (value)
    height = bar.get_height()
    # Add text label at the top of the bar
    plt.text(
        bar.get_x() + bar.get_width() / 2,
        height,
        f'{height:,}',  # Display the value with thousand separators for readability
        ha='center',
        va='bottom',
        color='black'
    )

# Display the plot
plt.show()

# Calculate the median family income for food desert tracts
median_income_food_desert = round(food_desert_tracts['MedianFamilyIncome'].mean())

# Calculate the median family income for neither_food_desert_nor_low_income_tracts
median_income_neither = round(neither_food_desert_nor_low_income_tracts['MedianFamilyIncome'].mean())

# Create a DataFrame to organize the median incomes for plotting
income_df = pd.DataFrame({
    'Group': ['Food Desert Tracts', ' Non Food Desert Tracts'],
    'Median Family Income': [median_income_food_desert, median_income_neither]
})

# Plotting the graph
plt.figure(figsize=(10, 6))
bars = plt.bar(income_df['Group'], income_df['Median Family Income'], color=['blue', 'green'])

# Add labels and title
plt.xlabel('Group')
plt.ylabel('Income')
plt.title('Income levels for Different Tracts')

# Add value labels at the top of each bar
for bar in bars:
    # Get the height of each bar (value)
    height = bar.get_height()
    # Add text label at the top of the bar
    plt.text(
        bar.get_x() + bar.get_width() / 2,
        height,
        f'{height:,}',  # Display the value with thousand separators for readability
        ha='center',
        va='bottom',
        color='black'
    )

# Display the plot
plt.show()

# Calculate mean values of each metric for food desert and non-food desert tracts
mean_poverty_rate_food_desert = food_desert_tracts['PovertyRate'].mean()
mean_minority_rate_food_desert = food_desert_tracts[minority_fields].sum().sum() / food_desert_tracts['Pop2010'].sum() * 100  # Calculate percent minorities
mean_TractHUNV_food_desert = food_desert_tracts['TractHUNV'].mean()
mean_TractSNAP_food_desert = food_desert_tracts['TractSNAP'].mean()

mean_poverty_rate_non_food_desert = neither_food_desert_nor_low_income_tracts['PovertyRate'].mean()
mean_minority_rate_non_food_desert = neither_food_desert_nor_low_income_tracts[minority_fields].sum().sum() / non_food_desert_tracts['Pop2010'].sum() * 100  # Calculate percent minorities
mean_TractHUNV_non_food_desert = neither_food_desert_nor_low_income_tracts['TractHUNV'].mean()
mean_TractSNAP_non_food_desert = neither_food_desert_nor_low_income_tracts['TractSNAP'].mean()

# Organize the data into a DataFrame
data_df = pd.DataFrame({
    'Metric': ['Poverty Rate', 'Percent Minority', 'HUNV', 'SNAP'],
    'Food Desert Tracts': [mean_poverty_rate_food_desert, mean_minority_rate_food_desert, mean_TractHUNV_food_desert, mean_TractSNAP_food_desert],
    'Non-Food Desert Tracts': [mean_poverty_rate_non_food_desert, mean_minority_rate_non_food_desert, mean_TractHUNV_non_food_desert, mean_TractSNAP_non_food_desert]
})

# Plotting the grouped bar graph
data_df.plot(kind='bar', x='Metric', figsize=(10, 6))

# Add labels and title
plt.xlabel('Metric')
plt.ylabel('Value')
plt.title('Comparison of Various Metrics for Food Desert and Non-Food Desert Tracts')

# Display the plot
plt.show()

print("Mean Poverty Rate for Food Deserts: " , mean_poverty_rate_food_desert)
print( "Mean Poverty Rate for Non Food Deserts: ", mean_poverty_rate_non_food_desert)

"""#Vulnerable Groups: Children"""

# Calculate the total population of the data set
total_population = df['Pop2010'].sum()

# Define the race fields
race_fields = ['TractWhite', 'TractBlack', 'TractAsian', 'TractNHOPI', 'TractAIAN', 'TractOMultir', 'TractHispanic']

# Calculate the sum of all the races for the data set
sum_of_all_races = df[race_fields].sum().sum()

# Print the results
print(f'Total population of the data set: {total_population}')
print(f'Sum of all races in the data set: {sum_of_all_races}')

# Calculate the total number of children in San Diego
total_children_san_diego = df['TractKids'].sum()

# Calculate the percentage of children relative to the total population
percent_children_san_diego = (total_children_san_diego / total_population) * 100

# Print the results
print(f'Total children in San Diego: {total_children_san_diego}')
print(f'Percent of children relative to total population in San Diego: {percent_children_san_diego:.2f}%')

# Define the age-related fields to compare
fields_to_compare = ['TractKids', 'TractSeniors']

# Calculate the total population count for food desert tracts and non-food desert tracts
total_population_food_desert = food_desert_tracts['Pop2010'].sum()
total_population_non_food_desert = neither_food_desert_nor_low_income_tracts['Pop2010'].sum()

# Calculate the sum of each age field for food desert tracts
sums_food_desert_tracts = food_desert_tracts[fields_to_compare].sum()

# Calculate the sum of each age field for neither food desert nor low-income tracts
sums_neither_food_desert_nor_low_income = neither_food_desert_nor_low_income_tracts[fields_to_compare].sum()

# Calculate the percentages of children and seniors for food desert tracts and non-food desert tracts
percent_food_desert_kids = (sums_food_desert_tracts['TractKids'] / total_population_food_desert) * 100
percent_food_desert_seniors = (sums_food_desert_tracts['TractSeniors'] / total_population_food_desert) * 100

percent_non_food_desert_kids = (sums_neither_food_desert_nor_low_income['TractKids'] / total_population_non_food_desert) * 100
percent_non_food_desert_seniors = (sums_neither_food_desert_nor_low_income['TractSeniors'] / total_population_non_food_desert) * 100

# Create a DataFrame to organize the sums and percentages for plotting
sums_df = pd.DataFrame({
    'Field': fields_to_compare,
    'Food Desert Tracts': sums_food_desert_tracts.values,
    'Neither Food Desert Nor Low-Income Tracts': sums_neither_food_desert_nor_low_income.values,
})

percent_df = pd.DataFrame({
    'Field': fields_to_compare,
    'Food Desert Tracts': [percent_food_desert_kids, percent_food_desert_seniors],
    'Non Food Desert Tracts': [percent_non_food_desert_kids, percent_non_food_desert_seniors],
})

# Plot the sum bar graph
ax = sums_df.set_index('Field').plot(kind='bar', figsize=(8, 6))

# Add labels and title for the sum bar graph
plt.xlabel('Age Group')
plt.ylabel('Sum')
plt.title('Sums of Seniors and Children for Food Desert Tracts vs. Non-Food Desert Tracts')

# Add sum bar labels
for container in ax.containers:
    ax.bar_label(container, padding=3, fmt='%.0f')  # Add labels to the bars, using integer formatting (%.0f)

# Display the sum plot
plt.show()

# Plot the percent bar graph
ax2 = percent_df.set_index('Field').plot(kind='bar', figsize=(8, 6), color=['blue', 'green'])

# Add labels and title for the percent bar graph
plt.xlabel('Age Group')
plt.ylabel('Percentage')
plt.title('Percent of Seniors and Children for Food Desert Tracts vs. Non-Food Desert Tracts')

# Add percent bar labels
for container in ax2.containers:
    ax2.bar_label(container, padding=3, fmt='%.2f%%')  # Add labels to the bars, using percentage formatting (%.2f%%)

# Display the percent plot
plt.show()

"""#Vulnerable Population: Minority Races
#Demographic analysis: Compare access by race
"""

# 3. Demographic analysis: Compare access by race

# Define the racial/ethnic group fields to compare
fields_to_compare = ['TractWhite', 'TractBlack', 'TractAsian', 'TractNHOPI', 'TractAIAN', 'TractOMultir', 'TractHispanic']

# Calculate the sum of each racial/ethnic group field for food desert tracts
sums_food_desert_tracts = food_desert_tracts[fields_to_compare].sum()

# Calculate the sum of each racial/ethnic group field for neither food desert nor low-income tracts
sums_neither_food_desert_nor_low_income = neither_food_desert_nor_low_income_tracts[fields_to_compare].sum()

# Create a DataFrame to organize the sums for plotting
sums_df = pd.DataFrame({
    'Field': fields_to_compare,
    'Food Desert Tracts': sums_food_desert_tracts.values,
    'Non Food Desert Tracts': sums_neither_food_desert_nor_low_income.values
})

# Create a bar graph
sums_df.set_index('Field').plot(kind='bar', figsize=(10, 6))

# Add labels and title
plt.xlabel('Racial/Ethnic Group')
plt.ylabel('Sum')
plt.title('Sum of Racial/Ethnic Groups for Food Desert Tracts vs. Non-Food Desert Tracts')

# Display the plot
plt.show()

# Define the racial/ethnic group fields to compare
total_race_fields = ['TractWhite', 'TractBlack', 'TractAsian', 'TractNHOPI', 'TractAIAN', 'TractOMultir', 'TractHispanic']

# Define the groups to compare
food_desert_tracts = df[df['LILATracts_halfAnd10'] == 1]
neither_food_desert_nor_low_income_tracts = df[(df['LILATracts_halfAnd10'] == 0) & (df['LowIncomeTracts'] == 0)]

# Calculate the total population for each group
total_population_food_desert = food_desert_tracts[race_fields].sum().sum()
total_population_non_food_desert = neither_food_desert_nor_low_income_tracts[race_fields].sum().sum()

# Calculate the percentage of each race relative to the total population for food desert tracts
percentages_food_desert = (food_desert_tracts[race_fields].sum() / total_population_food_desert) * 100

# Calculate the percentage of each race relative to the total population for non-food desert tracts
percentages_non_food_desert = (neither_food_desert_nor_low_income_tracts[race_fields].sum() / total_population_non_food_desert) * 100

# Create a DataFrame to organize the percentages for plotting
percent_df = pd.DataFrame({
    'Race': race_fields,
    'Food Desert Tracts': percentages_food_desert.values,
    'Non-Food Desert Tracts': percentages_non_food_desert.values
})

# Create a bar graph to compare the percentages of each race
plt.figure(figsize=(12, 8))
bars = percent_df.set_index('Race').plot(kind='bar', figsize=(12, 8), color=['blue', 'orange'])

# Add labels and title
plt.xlabel('Race')
plt.ylabel('Percentage (%)')
plt.title('Percent of Each Race in Food Desert Tracts vs. Non-Food Desert Tracts')

# Add value labels to the bars
for container in bars.containers:
    bars.bar_label(container, fmt='%.1f%%', padding=3)

# Display the plot
plt.show()

# Define the minority racial/ethnic group fields
race_fields = ['TractWhite','TractBlack', 'TractAsian', 'TractNHOPI', 'TractAIAN', 'TractOMultir', 'TractHispanic']
minority_fields = ['TractBlack', 'TractAsian', 'TractNHOPI', 'TractAIAN', 'TractOMultir', 'TractHispanic']

# Define the groups to compare
food_desert_tracts = df[df['LILATracts_halfAnd10'] == 1]
non_food_desert_tracts = df[(df['LILATracts_halfAnd10'] == 0) & (df['LowIncomeTracts'] == 0)]

# Calculate the total population for each group
total_population_food_desert = df[df['LILATracts_halfAnd10'] == 1][race_fields].sum().sum()
total_population_non_food_desert = df[(df['LILATracts_halfAnd10'] == 0) & (df['LowIncomeTracts'] == 0)][race_fields].sum().sum()

# Calculate the total sum of all minorities for each group
total_minority_food_desert = food_desert_tracts[minority_fields].sum().sum()
total_minority_non_food_desert = non_food_desert_tracts[minority_fields].sum().sum()

# Calculate the percentage of minorities relative to the total population for each group
percent_minority_food_desert = (total_minority_food_desert / total_population_food_desert) * 100
percent_minority_non_food_desert = (total_minority_non_food_desert / total_population_non_food_desert) * 100

# Create a DataFrame to organize the totals and percentages for plotting
data_df = pd.DataFrame({
    'Group': ['Food Desert Tracts', 'Non-Food Desert Tracts'],
    'Total Minority Count': [total_minority_food_desert, total_minority_non_food_desert],
    'Percent Minority (%)': [percent_minority_food_desert, percent_minority_non_food_desert],
    'Total Population': [total_population_food_desert, total_population_non_food_desert]
})

# Define the width of the bars
bar_width = 0.25

# Create a bar graph to compare the total minority count, total population, and a line plot for the percent minority
fig, ax1 = plt.subplots(figsize=(12, 8))

# Create bar plots for the total minority count and total population
groups = np.arange(len(data_df['Group']))
bars1 = ax1.bar(groups - bar_width / 2, data_df['Total Minority Count'], width=bar_width, color='blue', label='Total Minority Count')
bars2 = ax1.bar(groups + bar_width / 2, data_df['Total Population'], width=bar_width, color='gray', label='Total Population')

# Create a secondary y-axis to plot the percent minority as a line plot
ax2 = ax1.twinx()
lines = ax2.plot(data_df['Group'], data_df['Percent Minority (%)'], marker='o', color='orange', label='Percent Minority')

# Customize the x-axis and y-axes
ax1.set_xlabel('Tracts')
ax1.set_ylabel('Total Minority Count / Total Population')
ax2.set_ylabel('Percent Minority (%)')

# Add title
plt.title('Comparison of Total Minority Count, Total Population, and Percent Minority')

# Add value labels to the bars
for bars in [bars1, bars2]:
    for bar in bars:
        height = bar.get_height()
        label = f'{height:,}'  # Display values with thousand separators for readability
        ax1.text(
            bar.get_x() + bar.get_width() / 2,
            height,
            label,
            ha='center',
            va='bottom',
            color='black'
        )

# Add value labels to the line plot for percent minority
for i, val in enumerate(data_df['Percent Minority (%)']):
    ax2.text(i, val, f'{val:.2f}%', ha='center', va='top', color='orange')

# Move the legends to appropriate positions to avoid overlap
ax1.legend(loc='lower left', frameon=True)
ax2.legend(loc='upper right', frameon=True)

# Display the plot
plt.show()

"""#Calculate summary statistics
(mean, median, standard deviation, etc.) for the chosen fields in both groups.
This will give you an idea of how the two groups differ on the fields of interest.
"""

# Define the different Tracts!

# Filter tracts based on food desert tracts
food_desert_tracts = df[df['LILATracts_halfAnd10'] == 1]

# Filter the data set to find low-income tracts that are not food deserts
low_income_not_food_desert = df[(df['LowIncomeTracts'] == 1) & (df['LILATracts_halfAnd10'] == 0)]

# Filter tracts that are neither food deserts nor low-income tracts
neither_food_desert_nor_low_income_tracts = df[(df['LILATracts_halfAnd10'] == 0) & (df['LowIncomeTracts'] == 0)]

# Count the number of tracts in each group
low_income_not_food_desert_count = low_income_not_food_desert.shape[0]
food_desert_tract_count = food_desert_tracts.shape[0]
neither_food_desert_nor_low_income_tract_count = neither_food_desert_nor_low_income_tracts.shape[0]

# Print the counts
print(f'Number of low-income tracts not food deserts: {low_income_not_food_desert_count}')
print(f'Number of food desert tracts: {food_desert_tract_count}')
print(f'Number of tracts that are neither food deserts nor low-income tracts: {neither_food_desert_nor_low_income_tract_count}')

# Define a function to save summary statistics as an image
def save_summary_as_image(summary, filename, title):
    # Create a Matplotlib figure
    fig, ax = plt.subplots()

    # Hide axes
    ax.axis('off')

    # Display the summary text on the figure
    ax.text(0.1, 0.9, summary, ha='left', va='top', fontsize=10, transform=ax.transAxes, fontfamily='monospace')

    # Set the title of the figure
    ax.set_title(title)

    # Adjust the layout to fit the text
    fig.tight_layout()

    # Save the figure as an image (PNG format)
    fig.savefig(filename)

    # Download the image file
    files.download(filename)

    # Optionally, display the figure
    # plt.show()

# Fields to compare
fields_to_compare = ['Pop2010', 'OHU2010', 'PovertyRate', 'MedianFamilyIncome']

# Calculate summary statistics for food desert tracts
summary_food_desert = food_desert_tracts[fields_to_compare].describe().to_string()
save_summary_as_image(summary_food_desert, 'summary_food_desert.png', 'Summary statistics for food desert tracts')

# Calculate summary statistics for low income, non-food desert tracts
summary_low_income_non_food_desert = low_income_not_food_desert[fields_to_compare].describe().to_string()
save_summary_as_image(summary_low_income_non_food_desert, 'summary_low_income_non_food_desert.png', 'Summary statistics for low income non-desert tracts')

# Calculate summary statistics for non-food desert/non low income tracts
summary_non_food_desert_non_low_income = neither_food_desert_nor_low_income_tracts[fields_to_compare].describe().to_string()
save_summary_as_image(summary_non_food_desert_non_low_income, 'summary_non_food_desert_non_low_income.png', 'Summary statistics for non-food desert tracts')

# Perform t-tests to compare the means of the chosen fields between the two groups
print("\nT-test results:")
for field in fields_to_compare:
    t_stat, p_value = ttest_ind(food_desert_tracts[field], neither_food_desert_nor_low_income_tracts[field], equal_var=False)
    print(f'{field}: t-statistic = {t_stat:.2f}, p-value = {p_value:.5f}')

# Visualize distributions of chosen fields for both groups using boxplots
plt.figure(figsize=(12, 8))
for i, field in enumerate(fields_to_compare, 1):
    plt.subplot(2, 2, i)
    sns.boxplot(data=df, x='LILATracts_halfAnd10', y=field, palette='coolwarm')
    plt.title(f'Distribution of {field}')
    plt.xlabel('Food Desert (1) vs Non-Food Desert (0)')
    plt.ylabel(field)

# Show the plots
plt.tight_layout()
plt.show()

"""#4 Correlation Analysis
1: Indicates a perfect positive linear relationship between the two variables.

-1: Indicates a perfect negative linear relationship between the two variables.

0: Indicates no linear relationship between the two variables.
"""

# 4. Correlation analysis

# Define the fields you want to include in the correlation analysis
fields_to_analyze = ['LILATracts_halfAnd10','PovertyRate', 'MedianFamilyIncome', 'OHU2010','TractKids', 'TractSNAP']

# Run the correlation matrix
correlation_matrix = df[fields_to_analyze].corr()

# Print the correlation matrix
print("Correlation matrix:")
print(correlation_matrix)

# Save the correlation matrix to a CSV file
correlation_matrix.to_csv('kids_correlation_matrix.csv')

# 4. Correlation analysis

# Define the fields you want to include in the correlation analysis
fields_to_analyze = ['PovertyRate', 'MedianFamilyIncome', 'OHU2010','TractHUNV', 'TractSNAP']

# Run the correlation matrix
correlation_matrix = df[fields_to_analyze].corr()

# Print the correlation matrix
print("Correlation matrix:")
print(correlation_matrix)

# Save the correlation matrix to a CSV file
correlation_matrix.to_csv('correlation_matrix.csv')

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.impute import SimpleImputer

# 6. Regression analysis
# predict food desert (LILATracts_halfAnd10) using PovertyRate and MedianFamilyIncome

# Remove rows with missing values in X and y
df_clean = df.dropna(subset=['PovertyRate', 'MedianFamilyIncome', 'LILATracts_halfAnd10'])

# Define X and y
X = df_clean[['PovertyRate', 'MedianFamilyIncome', 'TractHUNV','TractSNAP']]
y = df_clean['LILATracts_halfAnd10']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Train the logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Predict on the testing set
y_pred = model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))

# 7. Clustering analysis (K-means clustering example)
from sklearn.cluster import KMeans

# Select relevant columns for clustering
clustering_data = df_clean[['PovertyRate', 'MedianFamilyIncome']]

# Define the number of clusters
kmeans = KMeans(n_clusters=3, random_state=42)
# Fit the K-means model and assign cluster labels to the cleaned dataset
df_clean['Cluster'] = kmeans.fit_predict(clustering_data)

# Visualize clusters
sns.scatterplot(data=df_clean, x='PovertyRate', y='MedianFamilyIncome', hue='Cluster', palette='Set2')
plt.title('Clustering of Tracts by Poverty Rate and Median Family Income')
plt.show()